// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: featureFlagConfig/feature_flag_config.proto

package feature_flag_config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureFlagConfigService_SetFeature_FullMethodName               = "/api.feature_flag_config.FeatureFlagConfigService/SetFeature"
	FeatureFlagConfigService_GetFeaturesByOptions_FullMethodName     = "/api.feature_flag_config.FeatureFlagConfigService/GetFeaturesByOptions"
	FeatureFlagConfigService_CheckFeatureAvailability_FullMethodName = "/api.feature_flag_config.FeatureFlagConfigService/CheckFeatureAvailability"
)

// FeatureFlagConfigServiceClient is the client API for FeatureFlagConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagConfigServiceClient interface {
	SetFeature(ctx context.Context, in *SetFeatureRequest, opts ...grpc.CallOption) (*SetFeatureResponse, error)
	GetFeaturesByOptions(ctx context.Context, in *GetFeaturesByOptionsRequest, opts ...grpc.CallOption) (*GetFeaturesByOptionsResponse, error)
	CheckFeatureAvailability(ctx context.Context, in *FeatureAvailabilityRequest, opts ...grpc.CallOption) (*FeatureAvailabilityResponse, error)
}

type featureFlagConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagConfigServiceClient(cc grpc.ClientConnInterface) FeatureFlagConfigServiceClient {
	return &featureFlagConfigServiceClient{cc}
}

func (c *featureFlagConfigServiceClient) SetFeature(ctx context.Context, in *SetFeatureRequest, opts ...grpc.CallOption) (*SetFeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFeatureResponse)
	err := c.cc.Invoke(ctx, FeatureFlagConfigService_SetFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagConfigServiceClient) GetFeaturesByOptions(ctx context.Context, in *GetFeaturesByOptionsRequest, opts ...grpc.CallOption) (*GetFeaturesByOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeaturesByOptionsResponse)
	err := c.cc.Invoke(ctx, FeatureFlagConfigService_GetFeaturesByOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagConfigServiceClient) CheckFeatureAvailability(ctx context.Context, in *FeatureAvailabilityRequest, opts ...grpc.CallOption) (*FeatureAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureAvailabilityResponse)
	err := c.cc.Invoke(ctx, FeatureFlagConfigService_CheckFeatureAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagConfigServiceServer is the server API for FeatureFlagConfigService service.
// All implementations must embed UnimplementedFeatureFlagConfigServiceServer
// for forward compatibility.
type FeatureFlagConfigServiceServer interface {
	SetFeature(context.Context, *SetFeatureRequest) (*SetFeatureResponse, error)
	GetFeaturesByOptions(context.Context, *GetFeaturesByOptionsRequest) (*GetFeaturesByOptionsResponse, error)
	CheckFeatureAvailability(context.Context, *FeatureAvailabilityRequest) (*FeatureAvailabilityResponse, error)
	mustEmbedUnimplementedFeatureFlagConfigServiceServer()
}

// UnimplementedFeatureFlagConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureFlagConfigServiceServer struct{}

func (UnimplementedFeatureFlagConfigServiceServer) SetFeature(context.Context, *SetFeatureRequest) (*SetFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeature not implemented")
}
func (UnimplementedFeatureFlagConfigServiceServer) GetFeaturesByOptions(context.Context, *GetFeaturesByOptionsRequest) (*GetFeaturesByOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturesByOptions not implemented")
}
func (UnimplementedFeatureFlagConfigServiceServer) CheckFeatureAvailability(context.Context, *FeatureAvailabilityRequest) (*FeatureAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFeatureAvailability not implemented")
}
func (UnimplementedFeatureFlagConfigServiceServer) mustEmbedUnimplementedFeatureFlagConfigServiceServer() {
}
func (UnimplementedFeatureFlagConfigServiceServer) testEmbeddedByValue() {}

// UnsafeFeatureFlagConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagConfigServiceServer will
// result in compilation errors.
type UnsafeFeatureFlagConfigServiceServer interface {
	mustEmbedUnimplementedFeatureFlagConfigServiceServer()
}

func RegisterFeatureFlagConfigServiceServer(s grpc.ServiceRegistrar, srv FeatureFlagConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeatureFlagConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureFlagConfigService_ServiceDesc, srv)
}

func _FeatureFlagConfigService_SetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagConfigServiceServer).SetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagConfigService_SetFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagConfigServiceServer).SetFeature(ctx, req.(*SetFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagConfigService_GetFeaturesByOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturesByOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagConfigServiceServer).GetFeaturesByOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagConfigService_GetFeaturesByOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagConfigServiceServer).GetFeaturesByOptions(ctx, req.(*GetFeaturesByOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagConfigService_CheckFeatureAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagConfigServiceServer).CheckFeatureAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagConfigService_CheckFeatureAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagConfigServiceServer).CheckFeatureAvailability(ctx, req.(*FeatureAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureFlagConfigService_ServiceDesc is the grpc.ServiceDesc for FeatureFlagConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlagConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.feature_flag_config.FeatureFlagConfigService",
	HandlerType: (*FeatureFlagConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFeature",
			Handler:    _FeatureFlagConfigService_SetFeature_Handler,
		},
		{
			MethodName: "GetFeaturesByOptions",
			Handler:    _FeatureFlagConfigService_GetFeaturesByOptions_Handler,
		},
		{
			MethodName: "CheckFeatureAvailability",
			Handler:    _FeatureFlagConfigService_CheckFeatureAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "featureFlagConfig/feature_flag_config.proto",
}
